@page "/products"
@implements IDisposable
@if (ProductService.IsVisible)
{
    <LoadingPage />
}
else
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-2">
                <CategoryPage CategoryClickedEvent="CategoryClickedEvent" DefaultCategoryClickedEvent="DefaultCategoryClickedEvent" />
            </div>
            <div class="col-lg-10">
                <BannerPage />
                <div class="card border-0">
                    <div class="card-header border-success-subtle mb-2"></div>
                    <ProductListPage AllProducts="ProductService.ProductsByCategory ?? ProductService.AllProducts" />
                </div>
            </div>
            <div class="col-lg-12 mt-5">
                <div class="card border-0" style="position:absolute;left:1px;right:1px;">
                    <div class="card-header border-danger-subtle">Recommend Product</div>
                    <RecommendPage />
                </div>
            </div>
        </div>
    </div>
}
@code {
    protected async override Task OnInitializedAsync()
    {
        await LoadData();
        ProductService.ProductAction += StateHasChanged;
    }
    private async void CategoryClickedEvent(int categoryId)
    {
        if (categoryId == 0) return;
        await ProductService.GetProductsByCategory(categoryId);
    }

    async Task DefaultCategoryClickedEvent()
    {
        ProductService.ProductsByCategory = null!;
        await LoadData();
    }
    async Task LoadData()
    {
        bool featured = false;
        await ProductService.GetAllProducts(featured);
    }
    public void Dispose()
    {
        ProductService.ProductAction -= StateHasChanged;
    }
}
